---
- hosts: lab
  connection: local

  vars_files:
    - vars.yml

  vars:
    ansible_python_interpreter: /opt/homebrew/var/postgres/venv/bin/python  # Ensure the correct Python interpreter is used
    PGDATA: /opt/homebrew/var/postgresql@14

  pre_tasks:
    - name: "Install PostgreSQL using homebrew (without sudo)"
      homebrew:
        name: postgresql@14
        state: present

    - name: "Ensure Python 3.12 is installed"
      homebrew:
        name: python@3.12

    - name: "Create a virtual environment for PostgreSQL"
      command: python3 -m venv /opt/homebrew/var/postgres/venv
      args:
        creates: /opt/homebrew/var/postgres/venv

    - name: "Install psycopg2-binary in the virtual environment"
      pip:
        virtualenv: /opt/homebrew/var/postgres/venv
        name: psycopg2-binary
        state: present

  tasks:
    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/opt/homebrew/var/postgresql@14/postgresql.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "initdb -D /opt/homebrew/var/postgresql@14"
      when: not postgres_data.stat.exists
      environment:
        PGDATA: "{{ PGDATA }}"

    - name: "Start PostgreSQL service"
      command: brew services start postgresql@14

    - name: "Create app database as current user"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
        login_user: "{{ ansible_env.USER }}"  # Use macOS user dynamically

    - name: "Create db user as current user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        db: "{{ db_name }}"
        login_user: "{{ ansible_env.USER }}"  # Use macOS user dynamically

    - name: "Grant db user access to app db as current user"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
        login_user: "{{ ansible_env.USER }}"  # Use macOS user dynamically

    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "/opt/homebrew/var/postgresql@14/pg_hba.conf"
        contype: host
        databases: all
        method: md5
        users: "{{ db_user }}"
        create: true
      notify: restart postgres

  handlers:
    - name: restart postgres
      command: brew services restart postgresql@14
